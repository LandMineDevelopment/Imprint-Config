#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#define BASE 0
#define NUM 1
#define SYM 2
#define NAV 3
#define NAW 4
#define NAC 5
#define CONTROL 6
#define CLASSIC 7
#define GAMING 8
#define MOUSE 9
#define SCROLL 10


#define COMBO_TAP_TIME 15
#define COMBO_PRIOR_IDLE_TIME 40


/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp F1       &kp F2     &kp F3      &kp F4     &kp F5                  &kp F6     &kp F7     &kp F8         &kp F9       &kp F10       &kp F11
&kp EQUAL  &kp N1       &kp N2     &kp N3      &kp N4     &kp N5                  &kp N6     &kp N7     &kp N8         &kp N9       &kp N0        &kp MINUS
&kp TAB    &kp Q        &kp W      &lt NAC E   &lt NUM R  &kp T                   &kp Y      &kp U      &tab_i         &ent_o       &kp P         &kp BSLH
&to 0      &kp A        &lt SYM S  &lt NAV D   &mt LCTL F &kp G                   &kp H      &mt LCTL J &bspc_k        &bspc_l      &kp P         &kp SEMI
&kp LSHFT  &kp Z        &mt LALT X &mt LGUI C  &lt NAW V  &kp B                   &kp N      &mt LCTL M &mt LGUI COMMA &mt LALT DOT &kp FSLH      &kp RSHFT
&trans     &kp KP_NLCK  &kp LGUI   &kp LALT    &trans                                        &trans     &kp RALT       &kp RGUI     &tog CLASSIC  &tog GAMING
                   &lt NAV ESC       &lt NUM ESC    &kp ESC                &caps_word   &lt NAV LC(BSPC) &caps_word
                   &mt LSHFT SPACE  &mt LCTRL TAB  &mo CONTROL             &mo CONTROL  &mt LCTRL RET    &mt LSHFT SPACE
            >;
        };

        Numpad_Layer {
            bindings = <
&trans   &trans  &trans     &trans    &trans   &trans            &trans  &trans     &trans     &trans     &trans  &trans
&kp F12  &kp F1  &kp F2     &kp F3    &kp F4   &kp F5            &kp F6  &kp F7     &kp F8     &kp F9     &kp F10 &kp F11 
&trans   &trans  &trans     &trans    &trans   &trans            &trans  &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans  &trans  
&trans   &trans  &trans     &trans    &trans   &tog NUM          &trans  &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans  &trans
&trans   &trans  &trans     &trans    &trans   &trans            &trans  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans  &trans
&trans   &trans  &trans     &trans  &trans                               &trans     &kp KP_N0  &trans     &trans  &trans
                            &trans  &trans  &trans              &trans  &trans     &trans
                            &trans  &trans  &trans              &trans  &trans     &trans
            >;
        };

        Symbols_Layer {
            bindings = <
&trans  &trans     &trans     &trans    &trans        &trans                &trans    &trans    &trans    &trans     &trans     &trans
&trans  &trans     &trans     &trans    &kp LS(RBKT)  &trans                &trans    &trans    &trans    &trans     &trans     &trans
&trans  &trans     &kp CARET  &kp LT    &kp GT        &trans                &trans    &kp EXCL  &kp PLUS  &kp EQUAL  &kp GRAVE  &trans
&trans  &kp TILDE  &kp MINUS  &kp LBKT  &kp RBKT      &kp SLASH             &kp STAR  &kp LPAR  &kp RPAR  &kp UNDER  &kp SEMI   &trans
&trans  &trans     &kp AT     &kp PIPE  &kp AMPS      &trans                &trans    &kp SQT   &kp DQT   &kp PRCNT  &trans     &trans
&trans  &trans     &trans     &trans    &trans                                        &trans    &trans    &trans     &trans     &trans
                              &trans    &trans  &trans                                &trans  &trans  &trans
                              &trans    &trans  &trans                                &trans  &trans  &trans        
            >;
        };

        Nav_Layer {
            bindings = <
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &trans    &trans    &trans     &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &trans    &trans    &trans     &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &kp HOME  &kp UP    &kp END    &trans     &trans
&trans  &trans    &trans    &kp LCTL    &trans        &tog NAV           &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans     &trans
&trans  &trans    &kp LALT  &kp LGUI    &trans        &trans             &trans  &kp PG_UP &trans    &kp PG_DN  &trans     &trans
&trans  &trans    &trans    &trans  &trans                                       &trans    &trans    &trans     &trans     &trans
                                &trans  &trans  &trans                      &trans  &trans    &trans
                                &trans  &trans  &trans                      &trans  &trans    &trans
            >;
        };

        Nav_Layer2 {
            bindings = <
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &trans          &trans         &trans           &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &trans          &trans         &trans           &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &kp HOME        &kp LG(UP)     &kp END          &trans     &trans
&trans  &trans    &trans    &kp LCTL    &trans        &tog NAW           &trans  &kp LG(LEFT)    &kp LG(DOWN)   &kp LG(RIGHT)    &trans     &trans
&trans  &trans    &kp LALT  &kp LGUI    &trans        &trans             &trans  &kp PG_UP       &trans         &kp PG_DN        &trans     &trans
&trans  &trans    &trans    &trans  &trans                                       &trans          &trans         &trans           &trans     &trans
                                &trans  &trans  &trans                      &trans  &trans    &trans
                                &trans  &trans  &trans                      &trans  &trans    &trans
            >;
        };

        Nav_Layer3 {
            bindings = <
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &trans          &trans         &trans           &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &trans          &trans         &trans           &trans     &trans
&trans  &trans    &trans    &trans      &trans        &trans             &trans  &kp HOME        &kp LC(UP)     &kp END          &trans     &trans
&trans  &trans    &trans    &kp LCTL    &trans        &tog NAC           &trans  &kp LC(LEFT)    &kp LC(DOWN)   &kp LC(RIGHT)    &trans     &trans
&trans  &trans    &kp LALT  &kp LGUI    &trans        &trans             &trans  &kp PG_UP       &trans         &kp PG_DN        &trans     &trans
&trans  &trans    &trans    &trans  &trans                                       &trans          &trans         &trans           &trans     &trans
                                &trans  &trans  &trans                      &trans  &trans    &trans
                                &trans  &trans  &trans                      &trans  &trans    &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                  &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 4        &trans        &trans        &trans        &trans        &trans                  &trans  &trans           &trans           &trans           &trans           &to 4
&to 4        &trans        &trans        &trans        &trans                                        &trans           &trans           &trans           &trans           &to 4
                                                       &trans        &trans        &trans    &trans  &trans           &trans
                                                       &trans        &trans        &trans    &trans  &trans           &trans
            >;
        };

        classic_layer {
            bindings = <
&kp ESC    &kp F1        &kp F2    &kp F3       &kp F4     &kp F5                  &kp F6     &kp F7    &kp F8     &kp F9    &kp F10         &kp F11
&kp EQUAL  &kp N1        &kp N2    &kp N3       &kp N4     &kp N5                  &kp N6     &kp N7    &kp N8     &kp N9    &kp N0          &kp MINUS
&kp TAB    &kp Q         &kp W     &kp E        &kp R      &kp T                   &kp Y      &kp U     &kp I      &kp O     &kp P           &kp BSLH
&to 0      &kp A         &kp S     &kp D        &kp F      &kp G                   &kp H      &kp J     &kp K      &kp L     &kp SEMI        &kp SEMI
&kp LSHFT  &kp Z         &kp X     &kp C        &kp V      &kp B                   &kp N      &kp M     &kp COMMA  &kp DOT   &kp FSLH        &kp RSHFT
&trans     &trans        &kp LGUI  &kp LALT  &trans                                           &trans    &bspc_del  &kp LC(BSPC)   &trans    &trans
                   &kp SPACE   &mt LCTRL ESC  &kp ESC                &caps_word   &mt LCTRL ESC  &kp SPACE
                   &kp LSHIFT  &kp LCTRL      &mo CONTROL            &mo CONTROL  &kp LCTRL      &kp LSHIFT 
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC    &kp F1        &kp F2    &kp F3       &kp F4     &kp F5                  &kp F6     &kp F7    &kp F8     &kp F9     &kp F10        &kp F11
&kp EQUAL  &kp N1        &kp N2    &kp N3       &kp N4     &kp N5                  &kp N6     &kp N7    &kp N8     &kp N9     &kp N0         &kp MINUS
&trans     &kp TAB       &kp Q     &kp W        &kp E      &kp R                   &kp T      &kp Y     &kp U      &kp I      &kp O          &kp P
&to 0      &trans        &kp A     &kp S        &kp D      &kp F                   &kp G      &kp H      &kp J     &kp K      &kp L          &kp SEMI        
&kp LSHFT  &trans        &kp Z     &kp X        &kp C      &kp V                   &kp B      &kp N      &kp M     &kp COMMA  &kp DOT        &kp FSLH  
&trans     &trans        &kp LGUI  &kp LALT  &trans                                           &trans    &bspc_del  &kp LC(BSPC)   &trans    &trans
                                      &trans  &trans  &trans                       &trans  &trans  &trans
                                      &trans  &trans  &trans                       &trans  &trans  &trans
            >;
        };
        
        Auto_Mouse_Layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mrc_exit  &tog SCROLL &mlc_exit &dmlc_exit        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans                               &trans  &trans  &trans  &trans  &trans
                                      &mkp LCLK  &trans  &trans    &mkp LCLK &trans  &trans
                                      &trans     &trans  &trans    &trans    &trans  &trans
            >;
        };

        Auto_Scroll_Layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &tog SCROLL &trans    &tog SCROLL            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans                               &trans  &trans  &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        factory_test {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4                            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bspc_k: backspace_k {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mt LCTL K>, <&bspc_del>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        bspc_l: backspace_l {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt SYM L>, <&kp LC(BSPC)>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        tab_i: tab_i {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp TAB>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ent_o: enter_o {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp O>, <&kp RET>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
            
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
            display-name = "Mod-Tap";
            require-prior-idle-ms = <80>;
        };

        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
            require-prior-idle-ms = <150>;
        };
        
        ltt: layer_tap_toggle {
            compatible = "zmk,behavior-hold-tap";
            //label = "LAYER_TAP_TOGGLE";
            #binding-cells = <2>;
            bindings = <&mo>, <&tog>;
            tapping-term-ms = <200>;
        };

        rl: retro_layer {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            retro-tap;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            tapping-term-ms = <200>;
        };
        
        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <43 44>;
            bindings = <&kp TAB>;
        };
        combo_enter {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <44 45>;
            bindings = <&kp RET>;
            layers = <BASE>;
        };
        combo_num_enter {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <44 45>;
            bindings = <&exit_num>;
            layers = <NUM>;
        };
       combo_ctrl_back {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <32 33>;
            bindings = <&kp LC(BSPC)>;
        }; 
        combo_back {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <31 32>;
            bindings = <&bspc_del>;
        };
        combo_undo {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <26 27>;
            bindings = <&kp LC(Z)>;
        };
        combo_redo {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <27 28>;
            bindings = <&kp LC(Y)>;
        };
        combo_save {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <26 28>;
            bindings = <&kp LC(S)>;
        };
        combo_num_layer {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <56 57>;
            bindings = <&to NUM>;
            layers = <BASE NUM>;
        };
        combo_nav_layer {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <50 51>;
            bindings = <&tog NAV>;
            layers = <BASE>;
        };
        combo_scroll_layer {
            timeout-ms = <COMBO_TAP_TIME>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_TIME>;
            key-positions = <51 52>;
            bindings = <&tog SCROLL>;
            layers = <BASE MOUSE SCROLL>;
        };
        combo_paste {
            timeout-ms = <COMBO_TAP_TIME>;
            key-positions = <39 40>;
            bindings = <&kp LC(V)>;
        };
        combo_copy {
            timeout-ms = <COMBO_TAP_TIME>;
            key-positions = <38 39>;
            bindings = <&kp LC(C)>;
        };
        combo_cut {
            timeout-ms = <COMBO_TAP_TIME>;
            key-positions = <38 40>;
            bindings = <&kp LC(X)>;
        };
    };

    macros {
        exit_num: exit_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RET>
                     , <&tog NUM>;
        };
        mlc_exit: mlc_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &mkp LCLK &tog MOUSE>
                     , <&macro_pause_for_release>
                     , <&macro_release &mkp LCLK &tog MOUSE>;
        };
        dmlc_exit: dmlc_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &mkp LCLK &mkp LCLK &tog MOUSE>;
        };
        mrc_exit: mrc_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &mkp RCLK &tog MOUSE>
                     , <&macro_pause_for_release>
                     , <&macro_release &mkp RCLK &tog MOUSE>;
        };
        mmc_exit: mmc_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &mkp MCLK &tog MOUSE>
                     , <&macro_pause_for_release>
                     , <&macro_release &mkp MCLK &tog MOUSE>;
        };
        vim_word: vim_next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            bindings =  <&macro_tap_time 0>,
                        <&macro_tap &kp LC(RIGHT) &kp LC(RIGHT) &kp LC(LEFT)>;
        };
        vim_back: vim_back_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(LEFT)>;
        };
        vim_copy_word: vim_copy_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(RIGHT) &kp LC(LS(LEFT)) &kp LC(C)>;
        };
        vim_cut_word: vim_cut_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(RIGHT) &kp LC(LS(LEFT)) &kp LC(X)>;
        };
    };

    input_processors {
        zip_toggle_mouse_layer: zip_toggle_mouse_layer {
            compatible = "zmk,input-processor-behaviors";
            #input-processor-cells = <0>;
            codes    = <INPUT_EV_REL>;
            bindings = <&tog MOUSE>;
        };
    };   
    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        excluded-positions = <38 39 40 41 70 73>;
    };

};


// right hand trackball configuration

&trackball_peripheral_listener {
    input-processors =
        // activate layer MOUSE within 5000ms of the trackball moving
        <&zip_temp_layer MOUSE 9000>;
    scroller {
        layers = <SCROLL>;
        input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),
        <&zip_xy_scaler 1 5>,
        // make this trackball output scrolling events by default instead of cursor movement,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;    
    };
 };
